{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavaScript\\\\calculator4\\\\calculator\\\\src\\\\Calculator\\\\calculator.jsx\",\n  _s = $RefreshSig$();\nimport \"./calculator.css\";\nimport Display from \"../Display/display\";\nimport Button from \"../Button/button\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport Decimal from \"decimal.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calculator = () => {\n  _s();\n  const [firstNum, setFirstNum] = useState(\"\");\n  const [lastNum, setLastNum] = useState(\"\");\n  const [operator, setOperator] = useState(\"\");\n  const [result, setResult] = useState(\"0\");\n  const [isResult, setIsResult] = useState(false);\n  const [prevCal, setPrevCal] = useState(\"\");\n  const handleResult = useCallback(() => {\n    if (!firstNum) return;\n    if (!operator || !lastNum) {\n      setResult(firstNum);\n      setIsResult(true);\n      return;\n    }\n    let resultNum;\n    const num1 = new Decimal(firstNum);\n    const num2 = new Decimal(lastNum);\n    switch (operator) {\n      case \"+\":\n        resultNum = num1.plus(num2);\n        break;\n      case \"-\":\n        resultNum = num1.minus(num2);\n        break;\n      case \"*\":\n        resultNum = num1.times(num2);\n        break;\n      case \"/\":\n        if (num2.isZero()) {\n          setResult(\"Error\");\n          setIsResult(true);\n          return;\n        }\n        resultNum = num1.div(num2);\n        break;\n      default:\n        return;\n    }\n    if (isResult) {\n      setPrevCal(`${firstNum}${operator}${lastNum}`);\n      setFirstNum(result);\n    } else {\n      setPrevCal(`${firstNum}${operator}${lastNum}`);\n      setFirstNum(resultNum.toString());\n    }\n    setResult(resultNum.toString());\n    setIsResult(true);\n  }, [firstNum, lastNum, operator, isResult, result]);\n  const handlePresent = useCallback(() => {\n    if (isResult) {\n      const newResult = new Decimal(firstNum).div(100).toString();\n      setFirstNum(newResult);\n      setLastNum(\"\");\n      setOperator(\"\");\n      setPrevCal(\"\");\n      setIsResult(false);\n      return;\n    }\n    if (!operator && firstNum) {\n      const newFirstNum = new Decimal(firstNum).div(100).toString();\n      setFirstNum(newFirstNum);\n      setIsResult(false);\n    } else if (firstNum && operator && lastNum) {\n      const newLastnum = new Decimal(lastNum).div(100).toString();\n      setLastNum(newLastnum);\n    }\n  }, [firstNum, lastNum, operator, isResult]);\n  const handleInput = useCallback(value => {\n    if (!isNaN(value) || value === \".\") {\n      if (value === \".\") {\n        if (!operator && firstNum.includes(\".\")) return;\n        if (operator && lastNum.includes(\".\")) return;\n        if (!operator && !firstNum) {\n          setFirstNum(\"0.\");\n          return;\n        } else if (operator && !lastNum) {\n          setLastNum(\"0.\");\n          return;\n        } else if (isResult) {\n          setFirstNum(prev => prev.includes(\".\") ? prev : prev + value);\n          setIsResult(false);\n          return;\n        }\n      }\n      if (isResult) {\n        setFirstNum(value);\n        setOperator(\"\");\n        setLastNum(\"\");\n        setIsResult(false);\n        return;\n      }\n      if (!operator) {\n        setFirstNum(prev => {\n          if (value === \".\") {\n            return prev + value;\n          } else {\n            return prev === \"0\" ? value : prev + value;\n          }\n        });\n      } else if (operator) {\n        setLastNum(prev => {\n          if (value === \".\") {\n            return prev + value;\n          } else {\n            return prev === \"0\" ? value : prev + value;\n          }\n        });\n      }\n    } else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].includes(value)) {\n      if (value === \"%\") {\n        handlePresent();\n        return;\n      }\n      if (result === \"Error\") {\n        return;\n      }\n      if (isResult) {\n        setFirstNum(result);\n        setOperator(value);\n        setIsResult(false);\n        setLastNum(\"\");\n        return;\n      }\n      if (!firstNum) {\n        setFirstNum(\"0\");\n        setOperator(value);\n      } else if (firstNum && lastNum) {\n        handleResult();\n        setOperator(value);\n        setIsResult(false);\n        return;\n      } else {\n        setOperator(value);\n      }\n    }\n  }, [firstNum, lastNum, operator, isResult, handleResult, handlePresent, result]);\n  const handleAllClear = useCallback(() => {\n    setFirstNum(\"\");\n    setLastNum(\"\");\n    setOperator(\"\");\n    setResult(\"0\");\n    setIsResult(false);\n    setPrevCal(\"\");\n  }, []);\n  const handleClear = useCallback(() => {\n    if (lastNum) {\n      setLastNum(prev => prev.slice(0, -1));\n    } else if (operator) {\n      setOperator(\"\");\n    } else {\n      setFirstNum(prev => prev.slice(0, -1));\n    }\n  }, [lastNum, operator]);\n  const handleToggle = useCallback(() => {\n    setFirstNum(prev => prev.startsWith(\"-\") ? prev.slice(1) : `-${prev}`);\n  }, []);\n  const handeleClick = value => {\n    if (value === \"=\") {\n      handleResult();\n    } else if (value === \"AC\" || value === \"C\") {\n      if (isResult || !firstNum && !lastNum) {\n        handleAllClear();\n      } else {\n        handleClear();\n      }\n    } else if (value === \"+/-\") {\n      handleToggle();\n    } else {\n      handleInput(value);\n    }\n  };\n  const handleKeyPress = useCallback(event => {\n    const key = event.key;\n    if (!isNaN(key) || key === \".\" || [\"+\", \"-\", \"*\", \"/\", \"%\"].includes(key)) {\n      handleInput(key);\n    } else if (key === \"=\" || key === \"Enter\") {\n      handleResult();\n    } else if (key === \"c\") {\n      if (isResult || !firstNum && !lastNum) {\n        handleAllClear();\n      } else {\n        handleClear();\n      }\n    }\n  }, [firstNum, lastNum, isResult, handleAllClear, handleClear, handleInput, handleResult]);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [handleKeyPress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      input: firstNum + operator + lastNum,\n      result: result,\n      firstNum: firstNum,\n      lastNum: lastNum,\n      isResult: isResult,\n      prevCal: prevCal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onButtonClick: handeleClick,\n      firstNum: firstNum,\n      lastNum: lastNum,\n      isResult: isResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(Calculator, \"TpXD6e7uQPr4CDaQGUymxOfbru8=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["Display","Button","useCallback","useEffect","useState","Decimal","jsxDEV","_jsxDEV","Calculator","_s","firstNum","setFirstNum","lastNum","setLastNum","operator","setOperator","result","setResult","isResult","setIsResult","prevCal","setPrevCal","handleResult","resultNum","num1","num2","plus","minus","times","isZero","div","toString","handlePresent","newResult","newFirstNum","newLastnum","handleInput","value","isNaN","includes","prev","handleAllClear","handleClear","slice","handleToggle","startsWith","handeleClick","handleKeyPress","event","key","window","addEventListener","removeEventListener","className","children","input","fileName","_jsxFileName","lineNumber","columnNumber","onButtonClick","_c","$RefreshReg$"],"sources":["C:/JavaScript/calculator4/calculator/src/Calculator/calculator.jsx"],"sourcesContent":["import \"./calculator.css\";\r\nimport Display from \"../Display/display\";\r\nimport Button from \"../Button/button\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nconst Calculator = () => {\r\n  const [firstNum, setFirstNum] = useState(\"\");\r\n  const [lastNum, setLastNum] = useState(\"\");\r\n  const [operator, setOperator] = useState(\"\");\r\n  const [result, setResult] = useState(\"0\");\r\n  const [isResult, setIsResult] = useState(false);\r\n  const [prevCal, setPrevCal] = useState(\"\");\r\n\r\n  const handleResult = useCallback(() => {\r\n    if (!firstNum) return;\r\n    if (!operator || !lastNum) {\r\n      setResult(firstNum);\r\n      setIsResult(true);\r\n      return;\r\n    }\r\n\r\n    let resultNum;\r\n    const num1 = new Decimal(firstNum);\r\n    const num2 = new Decimal(lastNum);\r\n    switch (operator) {\r\n      case \"+\":\r\n        resultNum = num1.plus(num2);\r\n        break;\r\n      case \"-\":\r\n        resultNum = num1.minus(num2);\r\n        break;\r\n      case \"*\":\r\n        resultNum = num1.times(num2);\r\n        break;\r\n      case \"/\":\r\n        if (num2.isZero()) {\r\n          setResult(\"Error\");\r\n          setIsResult(true);\r\n          return;\r\n        }\r\n        resultNum = num1.div(num2);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    if (isResult) {\r\n      setPrevCal(`${firstNum}${operator}${lastNum}`);\r\n      setFirstNum(result);\r\n    } else {\r\n      setPrevCal(`${firstNum}${operator}${lastNum}`);\r\n      setFirstNum(resultNum.toString());\r\n    }\r\n    setResult(resultNum.toString());\r\n    setIsResult(true);\r\n  }, [firstNum, lastNum, operator, isResult, result]);\r\n\r\n  const handlePresent = useCallback(() => {\r\n    if (isResult) {\r\n      const newResult = new Decimal(firstNum).div(100).toString();\r\n      setFirstNum(newResult);\r\n      setLastNum(\"\");\r\n      setOperator(\"\");\r\n      setPrevCal(\"\");\r\n      setIsResult(false);\r\n      return;\r\n    }\r\n\r\n    if (!operator && firstNum) {\r\n      const newFirstNum = new Decimal(firstNum).div(100).toString();\r\n      setFirstNum(newFirstNum);\r\n      setIsResult(false);\r\n    } else if (firstNum && operator && lastNum) {\r\n      const newLastnum = new Decimal(lastNum).div(100).toString();\r\n      setLastNum(newLastnum);\r\n    }\r\n  }, [firstNum, lastNum, operator, isResult]);\r\n\r\n  const handleInput = useCallback(\r\n    (value) => {\r\n      if (!isNaN(value) || value === \".\") {\r\n        if (value === \".\") {\r\n          if (!operator && firstNum.includes(\".\")) return;\r\n          if (operator && lastNum.includes(\".\")) return;\r\n          if (!operator && !firstNum) {\r\n            setFirstNum(\"0.\");\r\n            return;\r\n          } else if (operator && !lastNum) {\r\n            setLastNum(\"0.\");\r\n            return;\r\n          } else if (isResult) {\r\n            setFirstNum((prev) => (prev.includes(\".\") ? prev : prev + value));\r\n            setIsResult(false);\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (isResult) {\r\n          setFirstNum(value);\r\n          setOperator(\"\");\r\n          setLastNum(\"\");\r\n          setIsResult(false);\r\n          return;\r\n        }\r\n        if (!operator) {\r\n          setFirstNum((prev) => {\r\n            if (value === \".\") {\r\n              return prev + value;\r\n            } else {\r\n              return prev === \"0\" ? value : prev + value;\r\n            }\r\n          });\r\n        } else if (operator) {\r\n          setLastNum((prev) => {\r\n            if (value === \".\") {\r\n              return prev + value;\r\n            } else {\r\n              return prev === \"0\" ? value : prev + value;\r\n            }\r\n          });\r\n        }\r\n      } else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].includes(value)) {\r\n        if (value === \"%\") {\r\n          handlePresent();\r\n          return;\r\n        }\r\n        if (result === \"Error\") {\r\n          return;\r\n        }\r\n        if (isResult) {\r\n          setFirstNum(result);\r\n          setOperator(value);\r\n          setIsResult(false);\r\n          setLastNum(\"\");\r\n          return;\r\n        }\r\n        if (!firstNum) {\r\n          setFirstNum(\"0\");\r\n          setOperator(value);\r\n        } else if (firstNum && lastNum) {\r\n          handleResult();\r\n          setOperator(value);\r\n          setIsResult(false);\r\n          return;\r\n        } else {\r\n          setOperator(value);\r\n        }\r\n      }\r\n    },\r\n    [firstNum, lastNum, operator, isResult, handleResult, handlePresent, result]\r\n  );\r\n\r\n  const handleAllClear = useCallback(() => {\r\n    setFirstNum(\"\");\r\n    setLastNum(\"\");\r\n    setOperator(\"\");\r\n    setResult(\"0\");\r\n    setIsResult(false);\r\n    setPrevCal(\"\");\r\n  }, []);\r\n\r\n  const handleClear = useCallback(() => {\r\n    if (lastNum) {\r\n      setLastNum((prev) => prev.slice(0, -1));\r\n    } else if (operator) {\r\n      setOperator(\"\");\r\n    } else {\r\n      setFirstNum((prev) => prev.slice(0, -1));\r\n    }\r\n  }, [lastNum, operator]);\r\n\r\n  const handleToggle = useCallback(() => {\r\n    setFirstNum((prev) => (prev.startsWith(\"-\") ? prev.slice(1) : `-${prev}`));\r\n  }, []);\r\n\r\n  const handeleClick = (value) => {\r\n    if (value === \"=\") {\r\n      handleResult();\r\n    } else if (value === \"AC\" || value === \"C\") {\r\n      if (isResult || (!firstNum && !lastNum)) {\r\n        handleAllClear();\r\n      } else {\r\n        handleClear();\r\n      }\r\n    } else if (value === \"+/-\") {\r\n      handleToggle();\r\n    } else {\r\n      handleInput(value);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = useCallback(\r\n    (event) => {\r\n      const key = event.key;\r\n      if (\r\n        !isNaN(key) ||\r\n        key === \".\" ||\r\n        [\"+\", \"-\", \"*\", \"/\", \"%\"].includes(key)\r\n      ) {\r\n        handleInput(key);\r\n      } else if (key === \"=\" || key === \"Enter\") {\r\n        handleResult();\r\n      } else if (key === \"c\") {\r\n        if (isResult || (!firstNum && !lastNum)) {\r\n          handleAllClear();\r\n        } else {\r\n          handleClear();\r\n        }\r\n      }\r\n    },\r\n    [\r\n      firstNum,\r\n      lastNum,\r\n      isResult,\r\n      handleAllClear,\r\n      handleClear,\r\n      handleInput,\r\n      handleResult,\r\n    ]\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [handleKeyPress]);\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Display\r\n        input={firstNum + operator + lastNum}\r\n        result={result}\r\n        firstNum={firstNum}\r\n        lastNum={lastNum}\r\n        isResult={isResult}\r\n        prevCal={prevCal}\r\n      />\r\n      <Button\r\n        onButtonClick={handeleClick}\r\n        firstNum={firstNum}\r\n        lastNum={lastNum}\r\n        isResult={isResult}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}