{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavaScript\\\\calculator4\\\\calculator\\\\src\\\\Calculator\\\\calculator.jsx\",\n  _s = $RefreshSig$();\nimport \"./calculator.css\";\nimport Display from \"../Display/display\";\nimport Button from \"../Button/button\";\nimport { useState } from \"react\";\nimport Decimal from \"decimal.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calculator = () => {\n  _s();\n  const [firstNum, setFirstNum] = useState(\"\");\n  const [lastNum, setLastNum] = useState(\"\");\n  const [operator, setOperator] = useState(\"\");\n  const [result, setResult] = useState(\"0\");\n  const [isResult, setIsResult] = useState(false);\n  const handleResult = () => {\n    if (!firstNum) return;\n    if (!operator || !lastNum) {\n      setResult(firstNum);\n      setIsResult(true);\n      return;\n    }\n    let resultNum;\n    const num1 = new Decimal(firstNum);\n    const num2 = new Decimal(lastNum);\n    switch (operator) {\n      case \"+\":\n        resultNum = num1.plus(num2);\n        break;\n      case \"-\":\n        resultNum = num1.minus(num2);\n        break;\n      case \"*\":\n        resultNum = num1.times(num2);\n        break;\n      case \"/\":\n        if (num2.isZero()) {\n          setResult(\"Error\");\n          return;\n        }\n        resultNum = num1.div(num2);\n        break;\n      default:\n        return;\n    }\n    setResult(resultNum.toString());\n    setFirstNum(resultNum.toString());\n    setLastNum(\"\");\n    setOperator(\"\");\n    setIsResult(true);\n  };\n  const handleInput = value => {\n    if (!isNaN(value) || value === \".\") {\n      if (value === \".\") {\n        if (isResult) {\n          setResult(prev => prev.includes(\".\") ? value : prev + value);\n        }\n        if (!operator && firstNum.includes(\".\")) return;\n        if (operator && lastNum.includes(\".\")) return;\n        if (!operator && !firstNum) {\n          setFirstNum(\"0.\");\n          return;\n        }\n        if (operator && !lastNum) {\n          setLastNum(\"0.\");\n          return;\n        }\n      }\n      if (isResult) {\n        setFirstNum(value);\n        setOperator(\"\");\n        setLastNum(\"\");\n        setIsResult(false);\n        return;\n      }\n      if (!operator) {\n        setFirstNum(prev => {\n          if (value === \".\") {\n            return prev + value;\n          } else {\n            return prev === \"0\" ? value : prev + value;\n          }\n        });\n      } else if (operator) {\n        setLastNum(prev => {\n          if (value === \".\") {\n            return prev + value;\n          } else {\n            return prev === \"0\" ? value : prev + value;\n          }\n        });\n      }\n    } else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].includes(value)) {\n      if (isResult) {\n        setOperator(value);\n        setIsResult(false);\n      }\n      if (!firstNum) {\n        setFirstNum(\"0\");\n        setOperator(value);\n      } else if (firstNum && lastNum) {\n        handleResult();\n        setOperator(value);\n        setIsResult(false);\n        return;\n      } else {\n        setOperator(value);\n      }\n    }\n  };\n  const handleAllClear = () => {\n    setFirstNum(\"\");\n    setLastNum(\"\");\n    setOperator(\"\");\n    setResult(\"0\");\n    setIsResult(false);\n  };\n  const handleClear = () => {\n    if (lastNum) {\n      setLastNum(prev => prev.slice(0, -1));\n    } else if (operator) {\n      setOperator(\"\");\n    } else {\n      setFirstNum(prev => prev.slice(0, -1));\n    }\n  };\n  const handleToggle = () => {\n    setFirstNum(prev => prev.startsWith(\"-\") ? prev.slice(1) : `-${prev}`);\n  };\n  const handeleClick = value => {\n    if (value === \"=\") {\n      handleResult();\n    } else if (value === \"AC\" || value === \"C\") {\n      if (isResult || !firstNum && !lastNum) {\n        handleAllClear();\n      } else {\n        handleClear();\n      }\n    } else if (value === \"+/-\") {\n      handleToggle();\n    } else {\n      handleInput(value);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      input: firstNum + operator + lastNum,\n      result: result,\n      firstNum: firstNum,\n      lastNum: lastNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onButtonClick: handeleClick,\n      firstNum: firstNum,\n      lastNum: lastNum,\n      isResult: isResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Calculator, \"RZpQkUfy9/8DgdptL6HLMD3MZ1A=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["Display","Button","useState","Decimal","jsxDEV","_jsxDEV","Calculator","_s","firstNum","setFirstNum","lastNum","setLastNum","operator","setOperator","result","setResult","isResult","setIsResult","handleResult","resultNum","num1","num2","plus","minus","times","isZero","div","toString","handleInput","value","isNaN","prev","includes","handleAllClear","handleClear","slice","handleToggle","startsWith","handeleClick","className","children","input","fileName","_jsxFileName","lineNumber","columnNumber","onButtonClick","_c","$RefreshReg$"],"sources":["C:/JavaScript/calculator4/calculator/src/Calculator/calculator.jsx"],"sourcesContent":["import \"./calculator.css\";\r\nimport Display from \"../Display/display\";\r\nimport Button from \"../Button/button\";\r\nimport { useState } from \"react\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nconst Calculator = () => {\r\n  const [firstNum, setFirstNum] = useState(\"\");\r\n  const [lastNum, setLastNum] = useState(\"\");\r\n  const [operator, setOperator] = useState(\"\");\r\n  const [result, setResult] = useState(\"0\");\r\n  const [isResult, setIsResult] = useState(false);\r\n\r\n  const handleResult = () => {\r\n    if (!firstNum) return;\r\n    if (!operator || !lastNum) {\r\n      setResult(firstNum);\r\n      setIsResult(true);\r\n      return;\r\n    }\r\n\r\n    let resultNum;\r\n    const num1 = new Decimal(firstNum);\r\n    const num2 = new Decimal(lastNum);\r\n    switch (operator) {\r\n      case \"+\":\r\n        resultNum = num1.plus(num2);\r\n        break;\r\n      case \"-\":\r\n        resultNum = num1.minus(num2);\r\n        break;\r\n      case \"*\":\r\n        resultNum = num1.times(num2);\r\n        break;\r\n      case \"/\":\r\n        if (num2.isZero()) {\r\n          setResult(\"Error\");\r\n          return;\r\n        }\r\n        resultNum = num1.div(num2);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    setResult(resultNum.toString());\r\n    setFirstNum(resultNum.toString());\r\n    setLastNum(\"\");\r\n    setOperator(\"\");\r\n    setIsResult(true);\r\n  };\r\n\r\n  const handleInput = (value) => {\r\n    if (!isNaN(value) || value === \".\") {\r\n      if (value === \".\") {\r\n        if (isResult) {\r\n          setResult((prev) => (prev.includes(\".\") ? value : prev + value));\r\n        }\r\n        if (!operator && firstNum.includes(\".\")) return;\r\n        if (operator && lastNum.includes(\".\")) return;\r\n        if (!operator && !firstNum) {\r\n          setFirstNum(\"0.\");\r\n          return;\r\n        }\r\n        if (operator && !lastNum) {\r\n          setLastNum(\"0.\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (isResult) {\r\n        setFirstNum(value);\r\n        setOperator(\"\");\r\n        setLastNum(\"\");\r\n        setIsResult(false);\r\n        return;\r\n      }\r\n      if (!operator) {\r\n        setFirstNum((prev) => {\r\n          if (value === \".\") {\r\n            return prev + value;\r\n          } else {\r\n            return prev === \"0\" ? value : prev + value;\r\n          }\r\n        });\r\n      } else if (operator) {\r\n        setLastNum((prev) => {\r\n          if (value === \".\") {\r\n            return prev + value;\r\n          } else {\r\n            return prev === \"0\" ? value : prev + value;\r\n          }\r\n        });\r\n      }\r\n    } else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].includes(value)) {\r\n      if (isResult) {\r\n        setOperator(value);\r\n        setIsResult(false);\r\n      }\r\n      if (!firstNum) {\r\n        setFirstNum(\"0\");\r\n        setOperator(value);\r\n      } else if (firstNum && lastNum) {\r\n        handleResult();\r\n        setOperator(value);\r\n        setIsResult(false);\r\n        return;\r\n      } else {\r\n        setOperator(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAllClear = () => {\r\n    setFirstNum(\"\");\r\n    setLastNum(\"\");\r\n    setOperator(\"\");\r\n    setResult(\"0\");\r\n    setIsResult(false);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    if (lastNum) {\r\n      setLastNum((prev) => prev.slice(0, -1));\r\n    } else if (operator) {\r\n      setOperator(\"\");\r\n    } else {\r\n      setFirstNum((prev) => prev.slice(0, -1));\r\n    }\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setFirstNum((prev) => (prev.startsWith(\"-\") ? prev.slice(1) : `-${prev}`));\r\n  };\r\n\r\n  const handeleClick = (value) => {\r\n    if (value === \"=\") {\r\n      handleResult();\r\n    } else if (value === \"AC\" || value === \"C\") {\r\n      if (isResult || (!firstNum && !lastNum)) {\r\n        handleAllClear();\r\n      } else {\r\n        handleClear();\r\n      }\r\n    } else if (value === \"+/-\") {\r\n      handleToggle();\r\n    } else {\r\n      handleInput(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Display\r\n        input={firstNum + operator + lastNum}\r\n        result={result}\r\n        firstNum={firstNum}\r\n        lastNum={lastNum}\r\n      />\r\n      <Button\r\n        onButtonClick={handeleClick}\r\n        firstNum={firstNum}\r\n        lastNum={lastNum}\r\n        isResult={isResult}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}